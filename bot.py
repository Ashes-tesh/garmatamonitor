from flask import Flask
from threading import Thread
import os

# –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
app = Flask('')

@app.route('/')
def home():
    return "üü¢ Bot is running!"

def run_web_server():
    port = int(os.environ.get("PORT", 10000))
    app.run(host='0.0.0.0', port=port)

Thread(target=run_web_server).start()

# ========== –§–Ü–ö–° –î–õ–Ø COLLECTIONS ==========
import collections
import collections.abc
if not hasattr(collections, 'Mapping'):
    collections.Mapping = collections.abc.Mapping
if not hasattr(collections, 'Sequence'):
    collections.Sequence = collections.abc.Sequence
if not hasattr(collections, 'Iterable'):
    collections.Iterable = collections.abc.Iterable
# ==========================================

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackContext, CallbackQueryHandler
from valve.source.a2s import ServerQuerier, NoResponseError
from telegram.helpers import escape_markdown
import time
import asyncio
from config import CONFIG

# –ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è GARMATA UA
STATS_URL = "https://garmata-ua.fun/stats"
SHOP_URL = "https://garmata-ua.fun/store"
WEBSITE_URL = "https://garmata-ua.fun"

# –°–ª–æ–≤–Ω–∏–∫ –∑ URL –∑–æ–±—Ä–∞–∂–µ–Ω—å –¥–ª—è –∫–∞—Ä—Ç
MAP_IMAGES = {
    "default": "https://garmata-ua.fun/templates/standart/img/photo_20250809_005030.jpg"
}

def get_server_info():
    address = (CONFIG['server_ip'], CONFIG['server_port'])
    try:
        with ServerQuerier(address, timeout=5.0) as server:
            info = server.info()
            players_data = server.players()
            duration_seconds = info.get('duration', 0)
            minutes = duration_seconds // 60
            seconds = duration_seconds % 60
            game_duration = f"{minutes:02d}:{seconds:02d}"
            players_list = players_data.get('players', [])
            player_count = len(players_list)
            max_players = info.get('max_players', 0)
            return {
                'status': 'online',
                'map': info.get('map', 'unknown'),
                'map_image': MAP_IMAGES.get(info.get('map', ''), MAP_IMAGES['default']),
                'players': f"{player_count}/{max_players}",
                'game_duration': game_duration,
                'server_name': "GARMATA UA",
                'players_list': players_list,
                'player_count': player_count,
                'max_players': max_players
            }
    except (NoResponseError, ConnectionRefusedError):
        return {'status': 'offline'}
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {e}")
        return {'status': 'error', 'message': str(e)}

async def server_info(update: Update, context: CallbackContext):
    try:
        data = get_server_info()
        if data['status'] == 'offline':
            await update.message.reply_text("üî¥ –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –≤–∏–º–∫–Ω–µ–Ω–∏–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
            return
        if data['status'] == 'error':
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {data['message']}")
            return

        from datetime import datetime
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        message = (
            f"üéÆ *{data['server_name']}*\n"
            f"üìç –ö–∞—Ä—Ç–∞: {data['map']}\n"
            f"üë• –ì—Ä–∞–≤—Ü—ñ: {data['players']}\n\n"
            f"üîó [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞]({STATS_URL}) | [–ú–∞–≥–∞–∑–∏–Ω]({SHOP_URL})\n"
            f"\nüïí *–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:* {current_time}"
        )

        keyboard = [
            [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data='refresh_info')],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", url=STATS_URL),
                InlineKeyboardButton("üõí –ú–∞–≥–∞–∑–∏–Ω", url=SHOP_URL)
            ],
            [InlineKeyboardButton("üåê –í–µ–±-—Å–∞–π—Ç", url=WEBSITE_URL)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=data['map_image'],
            caption=escape_markdown(message, version=2),
            parse_mode='MarkdownV2',
            reply_markup=reply_markup
        )
    except Exception as e:
        await update.message.reply_text(f"üö® –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")

async def server_command(update: Update, context: CallbackContext):
    try:
        data = get_server_info()
        if data['status'] == 'offline':
            await update.message.reply_text("üî¥ –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –≤–∏–º–∫–Ω–µ–Ω–∏–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
            return
        if data['status'] == 'error':
            await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {data['message']}")
            return

        from datetime import datetime
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        message = (
            f"üéÆ *{data['server_name']}*\n"
            f"üó∫Ô∏è –ú–∞–ø–∞: {data['map']}\n"
            f"üë• *–°–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤:*\n"
        )

        for player in data['players_list']:
            player_time = time.strftime("%M:%S", time.gmtime(player.get('duration', 0)))
            message += (
                f"‚Ä¢ {player['name']}: üïí {player_time} | {player.get('score', 0)} –≤–±–∏–≤—Å—Ç–≤\n"
            )

        message += f"\nüïí *–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:* {current_time}"

        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=data['map_image'],
            caption=escape_markdown(message, version=2),
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        await update.message.reply_text(f"üö® –ü–æ–º–∏–ª–∫–∞: {str(e)}")

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    if query.data == 'refresh_info':
        try:
            data = get_server_info()
            if data['status'] != 'online':
                await query.edit_message_text("üî¥ –°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î")
                return
            new_caption = (
                f"üîÑ *–û–Ω–æ–≤–ª–µ–Ω–æ!*\n"
                f"üéÆ GARMATA UA\n"
                f"üìç –ö–∞—Ä—Ç–∞: {data['map']}\n"
                f"‚è± –ß–∞—Å –≥—Ä–∏: {data['game_duration']}\n"
                f"üë• –ì—Ä–∞–≤—Ü—ñ: {data['players']}\n\n"
                f"üîó [–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞]({STATS_URL}) | [–ú–∞–≥–∞–∑–∏–Ω]({SHOP_URL})"
            )
            await query.edit_message_media(
                media=InputMediaPhoto(
                    media=data['map_image'],
                    caption=escape_markdown(new_caption, version=2),
                    parse_mode='MarkdownV2'
                )
            )
        except Exception as e:
            await query.edit_message_text(f"üö® –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {str(e)}")

def main():
    application = ApplicationBuilder().token(CONFIG['bot_token']).build()
    application.add_handler(CommandHandler("info", server_info))
    application.add_handler(CommandHandler("s1", server_info))
    application.add_handler(CommandHandler("server", server_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    print("ü§ñ –ë–æ—Ç GARMATA UA –∑–∞–ø—É—â–µ–Ω–∏–π! –î–ª—è –∑—É–ø–∏–Ω–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C")
    application.run_polling()

if name == "main":
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ CS...")
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞...")
    main()
